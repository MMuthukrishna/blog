<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>step-functions on MK's Blog</title><link>https://mmuthukrishna.github.io/blog/tags/step-functions/</link><description>Recent content in step-functions on MK's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jan 2021 13:14:36 +0530</lastBuildDate><atom:link href="https://mmuthukrishna.github.io/blog/tags/step-functions/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Step Patterns</title><link>https://mmuthukrishna.github.io/blog/posts/aws-step-patterns/</link><pubDate>Fri, 01 Jan 2021 13:14:36 +0530</pubDate><guid>https://mmuthukrishna.github.io/blog/posts/aws-step-patterns/</guid><description>Introduction This article will talk about few of the most frequently used patterns in AWS Step. It assumes that you are familiar with AWS Step, if you want to learn about it, I suggest creating an AWS account and check out the example blueprint state machine definitions available or reading this
AWS Step Patterns Chunked Iterator Consider this problem
A CRM tool is used by sales team (Pipedrive) needs new data from Redshift (Data Warehouse) once a day, to do this you can use Pipedrive API&amp;rsquo;s to Create or Update Deals.</description></item><item><title>DAG Workflow Using AWS Step Functions and AWS Lambda</title><link>https://mmuthukrishna.github.io/blog/posts/dag-workflow-using-aws-step/</link><pubDate>Wed, 09 Dec 2020 04:01:48 +0530</pubDate><guid>https://mmuthukrishna.github.io/blog/posts/dag-workflow-using-aws-step/</guid><description>At Instamojo, we use Amazon Redshift as the data warehouse.
A typical requirement for analytics team is to aggregate new data from multiple source tables (say raw events) that can later be used in BI tools, dashboards, charts or other machine learning jobs.
For the sake of simplicity, let&amp;rsquo;s assume these are the aggregate operations performed
$$ f = MIN(x) $$
$$ f = MAX(x) $$
$$ f = COUNT(x) $$</description></item></channel></rss>